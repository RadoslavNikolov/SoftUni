An index is a data structure (most commonly a B- tree) that stores the values for a specific column in a table. 
An index is created on a column of a table. So, the key points to remember are that an index consists of column values from one table, 
and that those values are stored in a data structure. The index is a data structure. 



Because an index is basically a data structure that is used to store column values, looking up those values becomes much faster. 
And, if an index is using the most commonly used data structure type – a B- tree – then the data structure is also sorted. 
Having the column values be sorted can be a major performance enhancement – read on to find out why.



A B-tree is a method of placing and locating files (called records or keys) in a database. 
(The meaning of the letter B has not been explicitly defined.) The B-tree algorithm minimizes the number of times 
a medium must be accessed to locate a desired record, thereby speeding up the process. B-trees are preferred when decision points, called nodes, 
are on hard disk rather than in random-access memory (RAM). It takes thousands of times longer to access a data element 
from hard disk as compared with accessing it from RAM, because a disk drive has mechanical parts, 
which read and write data far more slowly than purely electronic media. B-trees save time by using nodes with many branches 
(called children), compared with binary trees, in which each node has only two children. When there are many children per node, 
a record can be found by passing through fewer nodes than if there are two children per node.
In a tree, records are stored in locations called leaves. This name derives from the fact that records always exist at end points; 
there is nothing beyond them. The maximum number of children per node is the order of the tree. 
The number of required disk accesses is the depth. The tradeoff is that the decision process at each node 
is more complicated in a B-tree as compared with a binary tree. A sophisticated program is required to execute the operations 
in a B-tree. But this program is stored in RAM, so it runs fast.
In a practical B-tree, there can be thousands, millions, or billions of records. Not all leaves necessarily contain a record, 
but at least half of them do. The difference in depth between binary-tree and B-tree schemes is greater in a practical database 
than in the example, because real-world B-trees are of higher order (32, 64, 128, or more). Depending on the number of records 
in the database, the depth of a B-tree can and often does change. Adding a large enough number of records will increase the depth; 
deleting a large enough number of records will decrease the depth. This ensures that the B-tree functions optimally 
for the number of records it contains.


Index types:

Clustered:
 
A clustered index sorts and stores the data rows of the table or view in order based on the clustered index key. 
The clustered index is implemented as a B-tree index structure that supports fast retrieval of the rows, 
based on their clustered index key values.
The only time the data rows in a table are stored in sorted order is when the table contains a clustered index. 
When a table has a clustered index, the table is called a clustered table. If a table has no clustered index, 
its data rows are stored in an unordered structure called a heap. 
 
 
Nonclustered:
 
A nonclustered index can be defined on a table or view with a clustered index or on a heap. Each index row in the nonclustered index 
contains the nonclustered key value and a row locator. This locator points to the data row in the clustered index or heap 
having the key value. The rows in the index are stored in the order of the index key values, but the data rows are not guaranteed 
to be in any particular order unless a clustered index is created on the table.


Unique:
 
A unique index ensures that the index key contains no duplicate values and therefore every row in the table or view is in some way 
unique. Uniqueness can be a property of both clustered and nonclustered indexes.
 

Columnstore:
 
An xVelocity memory optimized columnstore index based on vertical partitioning of the data by columns, stored as large objects (LOB).
An xVelocity memory optimized columnstore index, groups and stores data for each column and then joins all the columns to complete the whole index. 
 
 

Index with included columns:
 
A nonclustered index that is extended to include nonkey columns in addition to the key columns.
 

 

Index on computed columns:
 
An index on a column that is derived from the value of one or more other columns, or certain deterministic inputs.
 

Filtered:
 
An optimized nonclustered index, especially suited to cover queries that select from a well-defined subset of data. 
It uses a filter predicate to index a portion of rows in the table. A well-designed filtered index can improve query performance, 
reduce index maintenance costs, and reduce index storage costs compared with full-table indexes.


Spatial:
 
A spatial index provides the ability to perform certain operations more efficiently on spatial objects (spatial data) 
in a column of the geometry data type. The spatial index reduces the number of objects on which relatively costly spatial operations 
need to be applied. 
 

XML:
 
A shredded, and persisted, representation of the XML binary large objects (BLOBs) in the xml data type column.
 

Full-text 
 
A special type of token-based functional index that is built and maintained by the Microsoft Full-Text Engine for SQL Server. 
It provides efficient support for sophisticated word searches in character string data. Creating and maintaining a full-text index 
involves populating the index by using a process called a population (also known as a crawl).  
 
