Миграция

1. Абсолютно необходими три основни пакета в dependencies часта в projects.json

	"Microsoft.EntityFrameworkCore.SqlServer": "1.0.1",
    "Microsoft.EntityFrameworkCore.SqlServer.Design": {
      "version": "1.0.1",
      "type": "build"
    },
    "Microsoft.EntityFrameworkCore.Tools": {
      "version": "1.0.0-preview2-final",
      "type": "build"
    }
	
2. В tools часта на projecy.json трябва да има 
	"tools": {
		"Microsoft.AspNetCore.Server.IISIntegration.Tools": "1.0.0-preview2-final",
		"Microsoft.EntityFrameworkCore.Tools": "1.0.0-preview2-final"
	  },
	  
В Microsoft.EntityFrameworkCore.Tools се намират командите на EF


3.Всяко VS инсталира локален SQL Server LocalDB, който може да ползваме поне по време на разработката
	За наличието на подобен може да проверим чрез Developer Command Prompt. Нея ще използваме и за миграцията.
	Проверка чрез команда: sqllocaldb info
	Може да получим повече информация за някоя конкретна инстанция чрез команда: sqllocaldb info [има на инстанция]
		В моя случай:  sqllocaldb info mssqllocaldb
		
	Може да се използва Sql Server Object explorer на VS


4. При rc-1 релииза в project.json имаше command част, която после отпада
	Там имаше следното нещо

	"command": {
		"web" : "Microsoft.AspNet.Server.Kastrel"
		"ef" : "EntityFramework.Commands"
	  },
	  
  Това се използваше за дефиниране на friendly name "ef", което се използва от комндния ред (Developer Command Prompt)
  
  След това послед това отпада, но friendly names съществуват
  
5. Съдава се клас, който наследява DbContext задължително

	 public class OdeToFoodDbContext : DbContext
    {
        public OdeToFoodDbContext(DbContextOptions<OdeToFoodDbContext> options)
            : base(options)
        {

        }

        public DbSet<Restaurant> Restaurants { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }
    }
	
	Конструкторът е абсолютно задължителен, с параметър от този тип, който се предава на базовият конструктор.
	Не мога да кажа, че е задължително да има предефиниран метод OnModelCreating, но за всеки случай.
	В този клас се регистрират ентититата
	
6. Задължително се регистрира сервизът в Startup.ConfigureServices метода:

	 services.AddDbContext<OdeToFoodDbContext>(options =>
					options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
		
		
	
	Configuration.GetConnectionString("DefaultConnection") -> ще прочете "DefaultConnection" елемента от 
	ConnectionStrings часта на appSettings.json
		{
		  "ConnectionStrings": {
			"DefaultConnection": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=OdeToFood;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"
		  },
		  "greeting": "A configurable hello, to you!"

		}
		
		
7. След това се добавя миграция, след което се прилага тази миграция. Това може да се направи чрез EF команди
	в Developer Command Prompt. 
	За целата се навигира до root директорията на проекта тази , в която се намира project.json файла.
	"C:\Users\Radko\Desktop\OdeToFood\src\OdeToFood" в моя случай
	
	Използва се командата dnvm list  за да се види списък с runtime-a, който ще използваме ->
	
	Active Version           Runtime Architecture OperatingSystem Alias
------ -------           ------- ------------ --------------- -----
       1.0.0-beta8       clr     x64          win
       1.0.0-beta8       clr     x86          win
       1.0.0-beta8       coreclr x64          win
       1.0.0-beta8       coreclr x86          win
       1.0.0-rc1-update1 clr     x64          win
       1.0.0-rc1-update1 clr     x86          win
       1.0.0-rc1-update1 coreclr x64          win
       1.0.0-rc1-update1 coreclr x86          win
	   
   Ще използваме 1.0.0-rc1-update1 чрез командата:  dnvm use 1.0.0-rc1-update1 -p
   Това ще сетне пътищата и ще ни даде възможаност да използваме команди на ef  за миграцията т.е.
   дава ни последващ достъп до dotnet utilities, чрез комдата: dotnet
   
   Използване на комндата: dotnet ef    ,  за да достъпим командите на ef(database, dbcontext, migrations)
   Команда: dotnet ef migrations  ни води към други команди
		Commands:
			  add     Add a new migration
			  list    List the migrations
			  remove  Remove the last migration
			  script  Generate a SQL script from migrations
			Use "migrations [command] --help" for more information about a command.
   
   
   Команда: dotnet ef migrations add [name]  ->  в моя случай: dotnet ef migrations add v1
	Това създава папка Migrations в проекта с два класа  20161030181013_v1.cs  и OdeToFoodDbContextModelSnapshot.cs
	
	
   Команда: dotnet ef database ще приложи миграцията върху базата
   
	C:\Users\Radko\Desktop\OdeToFood\src\OdeToFood>dotnet ef database update
	Project OdeToFood (.NETCoreApp,Version=v1.0) was previously compiled. Skipping compilation.
	Done.
	

8. При промяна на съществуващите ентитита мисля, че трябва да се изполва dotname ef migrations add v2,
	т.е. нова миграция v2. След, което миграцията се прилага в базата: dotnet ef database update
   
		
